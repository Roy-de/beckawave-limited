use serde::{Deserialize, Serialize};
use sqlx::FromRow;

/// Represents a sales representative with their contact details.
///
/// # Fields
/// - `sales_rep_id`: Unique identifier for the sales representative. This ID is typically assigned by the database upon insertion.
/// - `name`: The name of the sales representative.
/// - `phone_no`: The contact phone number of the sales representative.
///
/// # Examples
///
/// ```rust
/// use crate::models::SalesRep;
///
/// let sales_rep = SalesRep {
///     sales_rep_id: 1,
///     name: "Alice Johnson".to_string(),
///     phone_no: "123-456-7890".to_string(),
/// };
///
/// assert_eq!(sales_rep.name, "Alice Johnson");
/// assert_eq!(sales_rep.phone_no, "123-456-7890");
/// ```
///
/// # Notes
/// - The `sales_rep_id` field is initialized to `0` in the `build_sales_rep` function and should be updated with a value assigned by the database after insertion.
#[derive(Debug, Serialize, Deserialize, FromRow)]
pub struct SalesRep {
    pub sales_rep_id: i64,
    pub name: String,
    pub phone_no: String,
}

/// Constructs a new `SalesRep` instance.
///
/// # Arguments
///
/// * `name` - The name of the sales representative.
/// * `phone_no` - The contact phone number of the sales representative.
///
/// # Returns
///
/// A `SalesRep` instance with `sales_rep_id` set to `0`. This ID is typically generated by the database upon insertion.
///
/// # Examples
///
/// ```rust
/// use crate::models::SalesRep;
///
/// let sales_rep = build_sales_rep("Alice Johnson".to_string(), "123-456-7890".to_string());
///
/// assert_eq!(sales_rep.name, "Alice Johnson");
/// assert_eq!(sales_rep.phone_no, "123-456-7890");
/// ```
///
/// # Notes
/// - The `sales_rep_id` field is initialized to `0` and should be updated with a value assigned by the database after insertion.
pub fn build_sales_rep(name: String, phone_no: String) -> SalesRep {
    SalesRep {
        sales_rep_id: 0,
        name,
        phone_no,
    }
}
