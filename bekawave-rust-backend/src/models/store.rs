use serde::{Deserialize, Serialize};
use sqlx::FromRow;

/// Represents a store in the database.
///
/// # Fields
/// - `store_id`: Unique identifier for the store. This ID is typically assigned by the database upon insertion.
/// - `name`: The name of the store.
/// - `location`: The location or address of the store.
///
/// # Examples
///
/// ```rust
/// use crate::models::Store;
///
/// let store = Store {
///     store_id: 1,
///     name: "My Store".into(),
///     location: "123 Main St".into(),
/// };
///
/// assert_eq!(store.name, "My Store");
/// assert_eq!(store.location, "123 Main St");
/// ```
///
/// # Notes
/// - The `store_id` field is initialized to `0` in the `build_store` function and should be updated with a value assigned by the database after insertion.
#[derive(Deserialize, Serialize, Debug, FromRow)]
pub struct Store {
    pub store_id: i64,
    pub name: String,
    pub location: String,
}

/// Constructs a new `Store` instance.
///
/// # Arguments
///
/// * `name` - The name of the store.
/// * `location` - The location or address of the store.
///
/// # Returns
///
/// A `Store` instance with `store_id` set to `0`. This ID is typically generated by the database upon insertion.
///
/// # Examples
///
/// ```rust
/// use crate::models::Store;
///
/// let store = build_store("My Store".into(), "123 Main St".into());
///
/// assert_eq!(store.name, "My Store");
/// assert_eq!(store.location, "123 Main St");
/// ```
///
/// # Notes
/// - The `store_id` field is initialized to `0` and should be updated with a value assigned by the database after insertion.
pub fn build_store(name: String, location: String) -> Store {
    Store {
        store_id: 0,
        name,
        location,
    }
}
