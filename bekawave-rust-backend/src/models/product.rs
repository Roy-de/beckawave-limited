use serde::{Deserialize, Serialize};
use sqlx::FromRow;

/// Represents a product in the database.
///
/// # Fields
/// - `product_id`: Unique identifier for the product. This ID is typically assigned by the database upon insertion.
/// - `name`: The name of the product.
/// - `price`: The price of the product in cents.
///
/// # Examples
///
/// ```rust
/// use crate::models::Product;
///
/// let product = Product {
///     product_id: 1,
///     name: "Laptop".to_string(),
///     price: 100000, // Price in cents, so 100000 cents is $1000.00
/// };
///
/// assert_eq!(product.name, "Laptop");
/// assert_eq!(product.price, 100000);
/// ```
///
/// # Notes
/// - The `product_id` field is initialized to `0` in the `build_product` function and should be updated with a value assigned by the database after insertion.
#[derive(Debug, Serialize, Deserialize, FromRow)]
pub struct Product {
    pub product_id: i64,
    pub name: String,
    pub price: i64,
}

/// Constructs a new `Product` instance.
///
/// # Arguments
///
/// * `name` - The name of the product.
/// * `price` - The price of the product in cents.
///
/// # Returns
///
/// A `Product` instance with `product_id` set to `0`. This ID is typically generated by the database upon insertion.
///
/// # Examples
///
/// ```rust
/// use crate::models::Product;
///
/// let product = build_product(
///     "Smartphone".to_string(),
///     49999, // Price in cents, so 49999 cents is $499.99
/// );
///
/// assert_eq!(product.name, "Smartphone");
/// assert_eq!(product.price, 49999);
/// ```
///
/// # Notes
/// - The `product_id` field is initialized to `0` and should be updated with a value assigned by the database after insertion.
pub fn build_product(name: String, price: i64) -> Product {
    Product {
        product_id: 0,
        name,
        price,
    }
}