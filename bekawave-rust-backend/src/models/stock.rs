use serde::{Deserialize, Serialize};
use sqlx::FromRow;

/// Represents stock information for a product in a store.
///
/// # Fields
/// - `stock_id`: Unique identifier for the stock entry. This ID is typically assigned by the database upon insertion.
/// - `store_id`: Identifier for the store where the stock is located.
/// - `amount`: Total value of the stock in currency units (e.g., dollars or euros).
/// - `product_id`: Identifier for the product that the stock represents.
/// - `quantity`: Number of units of the product in stock.
/// - `product_worth`: Worth of each unit of the product in currency units.
///
/// # Examples
///
/// ```rust
/// use crate::models::Stock;
///
/// let stock = Stock {
///     stock_id: 1,
///     store_id: 101,
///     amount: 5000,
///     product_id: 202,
///     quantity: 100,
///     product_worth: 50,
/// };
///
/// assert_eq!(stock.store_id, 101);
/// assert_eq!(stock.amount, 5000);
/// assert_eq!(stock.product_id, 202);
/// assert_eq!(stock.quantity, 100);
/// assert_eq!(stock.product_worth, 50);
/// ```
///
/// # Notes
/// - The `stock_id` field is initialized to `0` in the `build_stock` function and should be updated with a value assigned by the database after insertion.
#[derive(Debug, Serialize, Deserialize, FromRow)]
pub struct Stock {
    pub stock_id: i64,
    pub store_id: i32,
    pub amount: i32,
    pub product_id: i32,
    pub quantity: i32,
    pub product_worth: i32,
}

/// Constructs a new `Stock` instance.
///
/// # Arguments
///
/// * `store_id` - The identifier for the store where the stock is located.
/// * `amount` - The total value of the stock in currency units.
/// * `product_id` - The identifier for the product that the stock represents.
/// * `quantity` - The number of units of the product in stock.
/// * `product_worth` - The worth of each unit of the product in currency units.
///
/// # Returns
///
/// A `Stock` instance with `stock_id` set to `0`. This ID is typically generated by the database upon insertion.
///
/// # Examples
///
/// ```rust
/// use crate::models::Stock;
///
/// let stock = build_stock(101, 5000, 202, 100, 50);
///
/// assert_eq!(stock.store_id, 101);
/// assert_eq!(stock.amount, 5000);
/// assert_eq!(stock.product_id, 202);
/// assert_eq!(stock.quantity, 100);
/// assert_eq!(stock.product_worth, 50);
/// ```
///
/// # Notes
/// - The `stock_id` field is initialized to `0` and should be updated with a value assigned by the database after insertion.
pub fn build_stock(store_id: i32, amount: i32, product_id: i32, quantity: i32, product_worth: i32) -> Stock {
    Stock {
        stock_id: 0,
        store_id,
        amount,
        product_id,
        quantity,
        product_worth,
    }
}
